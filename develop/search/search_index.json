{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Scicat Ingestor","text":"<p>Scicat ingestor creates a raw dataset along with metadata using <code>wrdn</code> messages and scicat api whenever a new file is written by a file-writer.</p>"},{"location":"#how-to-install","title":"How to INSTALL","text":"<pre><code>git clone https://github.com/SciCatProject/scicat-ingestor.git\ncd scicat-ingestor\npip install -e .  # It will allow you to use entry-points of the scripts,\n                  # defined in ``pyproject.toml``, under ``[project.scripts]`` section.\n</code></pre>"},{"location":"#how-to-run","title":"How to RUN","text":"<p>All commands have prefix of <code>scicat</code> so that you can use auto-complete in a terminal.</p> <p>Each command is connected to a free function in a module. It is defined in <code>pyproject.toml</code>, under <code>[project.scripts]</code> section.</p> <p>All scripts parse the system arguments and configuration in the same way.</p>"},{"location":"#online-ingestor-highest-level-interface","title":"Online ingestor (Highest level interface)","text":"<p>You can start the ingestor daemon with certain configurations.</p> <p>It will continuously process <code>wrdn</code> messages and ingest the corresponding nexus files.</p> <pre><code>scicat_ingestor --logging.verbose -c PATH_TO_CONFIGURATION_FILE.yaml\n</code></pre> <p>A topic can contain non-<code>wrdn</code> message so the ingestor filters messages and ignores irrelevant types of messages.</p> <p>See configuration for how to use configuration files.</p>"},{"location":"#background-ingestor-lower-level-interface","title":"Background ingestor  (Lower level interface)","text":"<p>You can also run the ingestor file by file.</p> <p>You need to know the path to the nexus file you want to ingest and also the path to the <code>done_writing_message_file</code> as a json file.</p> <pre><code>scicat_background_ingestor \\\n    --logging.verbose \\\n    -c PATH_TO_CONFIGURATION_FILE.yaml \\\n    --nexus-file PATH_TO_THE_NEXUS_FILE.nxs \\\n    --done-writing-message-file PATH_TO_THE_MESSAGE_FILE.json\n</code></pre>"},{"location":"#dry-run","title":"Dry run","text":"<p>You can add <code>--ingestion.dry-run</code> flag for dry-run testings.</p> <pre><code>scicat_ingestor --logging.verbose -c PATH_TO_CONFIGURATION_FILE.yaml --ingestion.dry-run\n</code></pre> <pre><code>scicat_background_ingestor \\\n    --logging.verbose \\\n    -c PATH_TO_CONFIGURATION_FILE.yaml \\\n    --nexus-file PATH_TO_THE_NEXUS_FILE.nxs \\\n    --done-writing-message-file PATH_TO_THE_MESSAGE_FILE.json \\\n    --ingestion.dry-run\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>You can use a json file to configure options. There is a template, <code>resources/config.sample.json</code> you can copy/paste to make your own configuration file.</p> <p>In order to update the configurations, you should update it the <code>scicat_configuration</code> module.</p> <p>The template file can be synchronized automatically by <code>scicat_synchronize_config</code> command.</p> <p>There is a unit test that checks if the online ingestor configuration dataclass is in sync with the <code>resources/config.sample.json</code>.</p>"},{"location":"#configuration-validator","title":"Configuration Validator","text":"<p>You can validate a configuration file with <code>scicat_validate_ingestor_config</code> command.</p> <pre><code>scicat_validate_ingestor_config\n</code></pre> <p>It tries building nested configuration dataclasses from the configuration file.</p> <p>It will throw errors if configuration is invalid.</p> <p>i.e. In the operation, it'll ignore extra keywords that do not match the configuration dataclass arguments but validator throws an error if there are extra keywords that do not match the arguments.</p> <p>This is part of CI tests.</p>"},{"location":"developer-guide/documentation/","title":"Documentation","text":"<p>How to build and update documentation.</p> <p>We use <code>mkdocs</code> to build documentation.</p>"},{"location":"developer-guide/documentation/#build-locally","title":"Build Locally","text":"<p><code>tox -e docs</code> can build documentation locally but you can also use <code>mkdocs</code> command to serve/build the documentation.</p> <ul> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> </ul> <p>Note</p> <p>CI action uses <code>mike</code> instead of using <code>mkdocs</code> directly to build and deploy the documentation site at the same time.</p>"},{"location":"developer-guide/getting-started/","title":"Getting Started - Development","text":""},{"location":"developer-guide/getting-started/#virtual-environment","title":"Virtual Environment","text":"<p><code>scicat-ingestor</code> is a python project. We make multiple lock files for various environments and dev tools.</p> <p><code>requirements/dev.txt</code> contains all dependencies for development and tools.</p> <pre><code>conda create -n scicat-ingestor-dev python=3.12  # One and only supported version by scicat ingestor.\nconda activate scicat-ingestor-dev\npip install -r requirements/dev.txt\npip install -e .\n</code></pre> <p>The rest of the instruction will assume that this virtual environment is activated.</p>"},{"location":"developer-guide/getting-started/#pre-commit-hook","title":"Pre-commit Hook","text":"<pre><code>pre-commit install\n</code></pre> <p>Note</p> <p>Pre commit hooks are configured in <code>.pre-commit-config.yaml</code> file but some of <code>ruff</code> configurations are in <code>pyproject.toml</code>.</p>"},{"location":"developer-guide/getting-started/#other-devops-routines","title":"Other DevOps Routines","text":""},{"location":"developer-guide/getting-started/#copier-update","title":"Copier Update","text":"<p>Copier template is already set up in <code>.copier-answers.yml</code> so you just need to update it once in a while.</p> <pre><code>copier update\n</code></pre> <p>It will ask a lot of questions and most of them usually stay the same.</p> <p>Here are some properties of the project that should be updated by copier:</p> <pre><code>- python version\n- project name\n- CI actions\n- requirements/make_base.py file (Please report any bugs in this file to the template repository.)\n</code></pre>"},{"location":"developer-guide/getting-started/#lock-dependencies","title":"Lock Dependencies","text":"<p><pre><code>tox -e deps\n</code></pre> This command will compile all <code>*.in</code> files and create corresponding <code>*.txt</code> lock files under <code>requirements</code>.</p> <p>Once you create the lock files, push it to the project into a separate branch and create a PR to main branch.</p> <p>Base dependencies are parsed from <code>pyproject.toml</code> project dependencies and written into <code>base.in</code> file.</p> <p>See <code>testenv:deps</code> section in <code>tox.ini</code> file to see what it does.</p>"},{"location":"developer-guide/getting-started/#dev-toolscommands-overview","title":"Dev Tools/Commands Overview","text":"Tool/Command Configuration File Description pre-commit .pre-commit-config.yaml Pre-commit hooks including linter checks.Once it's set up, it will be run automatically whenever a new commit is created. It is also run by one of CI actions.Bypass Pre Commit CheckYou can also skip pre-commit checks by passing <code>--no-verify</code> flag to <code>git commit</code>. But please keep it passing as much as possible, as it is one of blocking CI tests. copier .copier-answers.yaml This project copies from <code>scipp copier template</code>You have to manually update from copier template once in a while.See Copier Update for more explanation. tox tox.ini Multiple tox environment/commands for development and CI actions.It creates virtual environments and use it for each commands.The virtual environment files are saved under <code>.tox</code> directory. <code>tox -e deps</code> tox.ini/[testenv:deps] Create lock files with dependencies. <code>tox -e static</code> tox.ini/[testenv:static] Run all precommit hooks on all files. <code>tox -e py312</code> tox.ini/[testenv] Run pytests with python version 3.12.You can pass more arguments to pytest. <code>tox -e mypy</code> tox.ini/[testenv:mypy] Run static type checks with <code>mypy</code>. <code>tox -e docs</code> tox.ini/[testenv:docs] Build documentation site. This part of the copier template is overwritten since this project does not require sphinx."}]}